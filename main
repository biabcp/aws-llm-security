# Specify AWS Provider
provider "aws" {
  region = var.aws_region
}

# Create a VPC
resource "aws_vpc" "secure_vpc" {
  cidr_block = "10.0.0.0/16"
  tags = {
    Name = "secure-llm-vpc"
  }
}

# Create a Public Subnet
resource "aws_subnet" "secure_subnet" {
  vpc_id            = aws_vpc.secure_vpc.id
  cidr_block        = "10.0.1.0/24"
  availability_zone = data.aws_availability_zones.available.names[0]

  tags = {
    Name = "secure-llm-subnet"
  }
}

# Create an Internet Gateway
resource "aws_internet_gateway" "secure_gateway" {
  vpc_id = aws_vpc.secure_vpc.id
}

# Create a Route Table
resource "aws_route_table" "secure_route_table" {
  vpc_id = aws_vpc.secure_vpc.id
}

# Associate the Route Table with Subnet
resource "aws_route_table_association" "secure_subnet_assoc" {
  subnet_id      = aws_subnet.secure_subnet.id
  route_table_id = aws_route_table.secure_route_table.id
}

# Create an S3 Bucket (Encrypted Storage for Logs and Prompts)
resource "aws_s3_bucket" "secure_llm_bucket" {
  bucket = "${var.project_name}-bucket"
  force_destroy = true

  server_side_encryption_configuration {
    rule {
      apply_server_side_encryption_by_default {
        sse_algorithm = "aws:kms"
      }
    }
  }

  tags = {
    Name = "secure-llm-storage"
  }
}

# Create a Lambda Execution Role
resource "aws_iam_role" "lambda_role" {
  name = "secure-llm-lambda-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Action = "sts:AssumeRole",
        Effect = "Allow",
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })

  tags = {
    Name = "secure-llm-lambda-role"
  }
}

# Attach policies to Lambda role
resource "aws_iam_role_policy_attachment" "lambda_basic_execution" {
  role       = aws_iam_role.lambda_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}

# Create a Lambda function for input validation
resource "aws_lambda_function" "input_validator" {
  function_name = "secure-llm-input-validator"
  handler       = "input_validator.lambda_handler"
  runtime       = "python3.11"
  role          = aws_iam_role.lambda_role.arn

  filename         = "../lambda/input_validator.zip" # Assumes zipped code
  source_code_hash = filebase64sha256("../lambda/input_validator.zip")
  
  environment {
    variables = {
      LOG_LEVEL = "INFO"
    }
  }

  tags = {
    Name = "secure-llm-input-validator"
  }
}

# API Gateway REST API
resource "aws_api_gateway_rest_api" "llm_api" {
  name        = "secure-llm-api"
  description = "API Gateway exposing secure LLM input validation"
}

# Create API Gateway Resource
resource "aws_api_gateway_resource" "llm_resource" {
  rest_api_id = aws_api_gateway_rest_api.llm_api.id
  parent_id   = aws_api_gateway_rest_api.llm_api.root_resource_id
  path_part   = "validate"
}

# Create API Gateway Method
resource "aws_api_gateway_method" "llm_method" {
  rest_api_id   = aws_api_gateway_rest_api.llm_api.id
  resource_id   = aws_api_gateway_resource.llm_resource.id
  http_method   = "POST"
  authorization = "NONE"
}

# Integrate API Gateway with Lambda
resource "aws_api_gateway_integration" "llm_integration" {
  rest_api_id = aws_api_gateway_rest_api.llm_api.id
  resource_id = aws_api_gateway_resource.llm_resource.id
  http_method = aws_api_gateway_method.llm_method.http_method
  integration_http_method = "POST"
  type                    = "AWS_PROXY"
  uri                     = aws_lambda_function.input_validator.invoke_arn
}

# Deploy API Gateway
resource "aws_api_gateway_deployment" "llm_deployment" {
  depends_on = [
    aws_api_gateway_integration.llm_integration
  ]

  rest_api_id = aws_api_gateway_rest_api.llm_api.id
  stage_name  = "prod"
}

# Lambda Permission to allow API Gateway invocation
resource "aws_lambda_permission" "api_gateway_permission" {
  statement_id  = "AllowExecutionFromAPIGateway"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.input_validator.function_name
  principal     = "apigateway.amazonaws.com"
  source_arn    = "${aws_api_gateway_rest_api.llm_api.execution_arn}/*/*"
}

# Get Available AZs dynamically
data "aws_availability_zones" "available" {}

